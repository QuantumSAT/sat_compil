# build variables
# please specify corresponding variables before include this file 
LBITS		= $(shell getconf LONG_BIT)
  CC		= g++
PURIFY 		= purify
SUFFIX  	= cc
SHELL		= /bin/bash
SYSNAME = linux
PLATFORM = $(SYSNAME)_$(LBITS)

PURIFY		  =
IFLAG       =	
CFLAG		    = -c
CFLAG      += -Werror=return-type
LFLAG       = 
LFLAG2      = 

APP_NAME = qSat
APP_DEBUG_NAME = qSat-debug
APP_TEST_NAME = qSat-test
APP_GPROF_NAME = qSat-gprof

#for report build time
#TIME = `date`
TIME = `date +%Y-%m-%d" "%H:%M:%S`
TIME_FILE = time

BUILT_BY = `whoami`

#SVNVERSION = `svn info|grep Revision|awk  '{print $2}'`
#SVNVERSION = `cat ".svn/entries" | head -n 4 | tail -n 1`
#CentOS has different entry format
#SVNVERSION = `cat ".svn/entries" | grep -E 'revision|^[0-9]+' | head -n 2 | tail -n 1 | cut -d '"' -f 2`

ifeq ($(LBITS),64) 
	LFLAG = -mcmodel=medium
endif

#default is optimized mode
ifeq ($(OPTMODE),dbg) 
    CFLAG += -g -gdwarf-2 -DDEBUG
else 
    OPTMODE = opt
    CFLAG += -O3
endif

ifeq ($(SYSNAME),SUNOS)
	CFLAG  += -msupersparc
else 
    ifeq ($(SYSNAME),LINUX)
	CFLAG +=  -mi686
    endif
endif

ifeq ($(MODULE_NAME),gui)
  ifeq ($(LBITS),64)
    #CFLAG  += -ansi -pedantic -Wall -Wno-unused-variable -Wno-reorder -W -Wcast-qual -Wwrite-strings -std=c++0x -mcmodel=medium
    CFLAG  += -ansi -pedantic -Wall -Wno-reorder -W -Wcast-qual -Wwrite-strings -mcmodel=medium -std=c++0x
  else
#CFLAG  += -ansi -pedantic -Wall -Wno-unused-variable -Wno-reorder -W -Wcast-qual -Wwrite-strings -std=c++0x
    CFLAG  += -ansi -pedantic -Wall -Wno-reorder -W -Wcast-qual -Wwrite-strings -std=c++0x
  endif
else 
  ifeq ($(LBITS),64)
#CFLAG += -ansi -pedantic -Wall -Wno-reorder -W -Wconversion -Wcast-qual -Wwrite-strings -std=c++0x -mcmodel=medium
    CFLAG += -ansi -pedantic -Wall -Wno-reorder -W -Wconversion -Wcast-qual -Wwrite-strings  -mcmodel=medium -std=c++0x
  else
#CFLAG += -ansi -pedantic -Wall -Wno-reorder -W -Wconversion -Wcast-qual -Wwrite-strings -std=c++0x
    CFLAG += -ansi -pedantic -Wall -Wno-reorder -W -Wconversion -Wcast-qual -Wwrite-strings -std=c++0x
  endif
endif

ifneq ($(GPROF), )
	LFLAG += -pg
	CFLAG += -pg
endif

# setup those default dirs for objects, libs, bin
MKDIR 		:= $(ROOT)/build/mkdir.sh -p
LIB_DIR 	:= $(ROOT)/lib/$(PLATFORM)/$(OPTMODE)
OBJ_DIR 	:= $(ROOT)/obj/$(PLATFORM)/$(OPTMODE)
DEP_DIR		:= $(OBJ_DIR)
BIN_DIR 	:= $(ROOT)/release/$(PLATFORM)
INC_DIR 	:= $(ROOT)/include
#OA_DIR 	:= /opt/si2/oa

dummy_lib	:= $(shell [ -d $(LIB_DIR) ] || $(MKDIR) $(LIB_DIR))
dummy_obj	:= $(shell [ -d $(OBJ_DIR) ] || $(MKDIR) $(OBJ_DIR))
dummy_bin	:= $(shell [ -d $(BIN_DIR) ] || $(MKDIR) $(BIN_DIR))

SYS_INC = -I/usr/local/include -I/usr/include -I/usr/include/tcl8.4
BOOST_INC = -I/usr/local/boost/include
#OA_INC = -I$(OA_DIR)/include/oa
#USER_INC = -I$(ROOT)/include -I$(ROOT)/include/c++
USER_INC = -I$(ROOT)/include

QT_DIR = /usr/local/Trolltech/Qt-4.8.6/include
QT_INC = -I$(QT_DIR)/QtCore -I$(QT_DIR)/QtGui -I$(QT_DIR) -I$(QT_DIR)/QtOpenGL -I$(QT_DIR)/QtSvg

SYS_LIB = -L/usr/lib/ -ltcl8.4 -lrt -ldl
BOOST_LIB = 

#OA_LIB_DIR = ${OA_DIR}/lib/${PLATFORM}/optMT 
#OA_LIB = -L$(OA_LIB_DIR) -loaTech -loaDesign -loaCommon -loaDM -loaBase -loaPlugIn

QT_LIB_DIR = /usr/local/Trolltech/Qt-4.8.6/lib
QT_LIB = -L$(QT_LIB_DIR) -lQtCore -lQtGui -lQtOpenGL -lQtSvg #-lGL

#xml rpc for tcp-ip / distributed computing
#make sure you install libxmlrpc to /usr/include and /usr/lib
#XMLRPC_LIB = -L/usr/lib -lxmlrpc_server_abyss++ -lxmlrpc_server++ -lxmlrpc_server_abyss -lxmlrpc_server \
#			 -lxmlrpc_abyss -lxmlrpc_client++ -lxmlrpc_client -lxmlrpc++ -lxmlrpc \
#			 -lxmlrpc_util -lxmlrpc_xmlparse -lxmlrpc_xmltok \
			 

#google test
#GTEST_DIR = /usr/local/gtest-1.6.0
#GTEST_INC = -I$(GTEST_DIR)/include
#GTEST_LIB = -L$(GTEST_DIR)/lib/.libs -lgtest

#3rd party lib (reference lib)
REFERENCE_INC = -I$(ROOT)/reference/readline/inc \
                -I$(ROOT)/reference/liberty_parser/inc \
                -I$(ROOT)/reference/sapi

REFERENCE_LIB = -L$(ROOT)/reference/readline/lib$(LBITS) -lreadline -lhistory -ltermcap \
                -L$(ROOT)/reference/syn/lib$(LBITS) -lsyn
#               -L$(ROOT)/reference/sapi -ldwave_sapi
#                -L$(ROOT)/reference/liberty_parser/lib$(LBITS) -lsi2dr_liberty

ifneq ($(NOGUI), )
#IFLAG += $(USER_INC) $(SYS_INC) $(OA_INC) $(REFERENCE_INC)
	IFLAG += $(USER_INC) $(SYS_INC) $(REFERENCE_INC) $(BOOST_INC)
    LFLAG2 += $(REFERENCE_LIB) $(SYS_LIB) $(BOOST_LIB)
else
ifneq ($(TEST), )
    CFLAG += -DGUI -DNIMBUS_GTEST
#IFLAG += $(USER_INC) $(SYS_INC) $(OA_INC) $(GTEST_INC) $(REFERENCE_INC)
    IFLAG += $(USER_INC) $(SYS_INC) $(BOOST_INC) $(GTEST_INC) $(REFERENCE_INC) 
    LFLAG2 += $(QT_LIB) $(BOOST_LIB) $(GTEST_LIB) $(REFERENCE_LIB) $(SYS_LIB)
else 
    CFLAG += -DGUI
#IFLAG += $(USER_INC) $(SYS_INC) $(OA_INC) $(REFERENCE_INC)
    IFLAG += $(USER_INC) $(SYS_INC) $(BOOST_INC) $(REFERENCE_INC)
    LFLAG2 += $(QT_LIB) $(BOOST_LIB) $(REFERENCE_LIB) $(SYS_LIB)
endif
endif

#functions
ifeq ($(DIRS),) 
    define sub_make_routine
    endef
else
    define sub_make_routine
	for src in $(DIRS); do \
	    cd $$src; $$SUBMAKE; cd ..; \
	done
    endef
endif

